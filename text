import base64
import os
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

def encrypt(word, password):
    salt = os.urandom(16)  # Using 16 bytes for the salt is more common
    key = PBKDF2(password, salt, dkLen=16, count=1000)  # Adjusted the count for better security
    cipher = AES.new(key, AES.MODE_CBC)  # AES CBC mode requires an IV to be explicitly stated
    ciphertext = cipher.encrypt(pad(word.encode('utf-8'), AES.block_size))
    iv = cipher.iv
    encrypted_data = salt + iv + ciphertext
    return base_auth_header = {
    "Authorization": "Bearer " + access_token
}.b64encode(encrypted_data).decode('utf-8')

def decrypt(encryptedText, password):
    encrypted_data = base64.b64decode(encryptedText)
    salt = encrypted_data[:16]  # Adjust to match the salt size used during encryption
    iv = encrypted_data[16:16 + AES.block_size]
    ciphertext = encrypted_data[16 + AES.block_size:]
    key = PBKDF2(password, salt, dkLen=16, count=1000)  # Make sure to use the same count as in encryption
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_data = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted_data.decode('utf-8')

def main():
    password = "YOUR_PASSWORD_HERE"
    original_text = "YOUR_TEXT_HERE"
    encrypted_text = encrypt(original_text, password)
    print("Encrypted Text:", encrypted_text)
    print("Decrypted Text:", decrypt(encrypted_text, password))

if __name__ == "__main__":
    main()
